import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime, timedelta
import random

class TicketBookingApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Ethiopian Airlines")

        self.setup_styles()
        self.create_main_frame()
        self.create_widgets()

    def setup_styles(self):
        self.style = ttk.Style()
        self.style.configure("TLabel", font=("Helvetica", 12), foreground="red", background="yellow")
        self.style.configure("TButton", foreground="Black", padding=15)
        self.style.configure("TCombobox", font=("Helvetica", 12))
        self.style.configure("TEntry", font=("Helvetica", 12))
        self.style.configure('Main.TFrame', background='forest green')

    def create_main_frame(self):
        self.main_frame = ttk.Frame(self.root, padding=20, style='Main.TFrame')
        self.main_frame.grid(row=0, column=0, sticky="nsew")
        self.root.grid_rowconfigure(0, weight=1)
        self.root.grid_columnconfigure(0, weight=1)

    def create_widgets(self):
        title_label = tk.Label(self.main_frame, text="Ethiopian Airlines Ticket Booking", font=("Helvetica", 20, "bold"), bg="yellow", fg="red")
        title_label.grid(row=0, column=0, columnspan=100, padx=35, pady=15)

        self.origin_label = self.create_label("Select Origin Country:", 1)
        self.origin_var, self.origin_dropdown = self.create_combobox(["Gonder", "Axum", "Lalibela", "Bahirdar"], 1)
        self.origin_dropdown.bind("<<ComboboxSelected>>", self.update_ticket_price)

        self.destination_label = self.create_label("Select Destination Country:", 2)
        self.destination_var, self.destination_dropdown = self.create_combobox(["Gonder", "Axum", "Lalibela", "Bahirdar"], 2)
        self.destination_dropdown.bind("<<ComboboxSelected>>", self.update_ticket_price)

        self.departure_time_label = self.create_label("Departure Time:", 3)
        self.departure_time_var, self.departure_time_dropdown = self.create_combobox(["08:00", "12:00", "16:00", "20:00"], 3)

        self.num_tickets_label = self.create_label("Number of Tickets:", 4)
        self.num_tickets_var = tk.IntVar()
        self.num_tickets_entry = self.create_entry(self.num_tickets_var, 4)

        self.ticket_class_label = self.create_label("Class:", 5)
        self.ticket_class_var, self.ticket_class_dropdown = self.create_combobox(["Economy", "Business"], 5)
        self.ticket_class_dropdown.bind("<<ComboboxSelected>>", self.update_ticket_price)

        self.price_label = self.create_label("Total Price:", 6)
        self.price_var = tk.StringVar()
        self.price_entry = self.create_entry(self.price_var, 6, readonly=True)

        self.name_label = self.create_label("Passenger Name:", 7, background="yellow", foreground="red")
        self.name_var = tk.StringVar()
        self.name_entry = self.create_entry(self.name_var, 7)

        self.age_label = self.create_label("Passenger Age:", 8, background="yellow", foreground="red")
        self.age_var = tk.StringVar()
        self.age_entry = self.create_entry(self.age_var, 8)

        self.gender_label = self.create_label("Passenger Gender:", 9, background="yellow", foreground="red")
        self.gender_var, self.gender_combobox = self.create_combobox(["Male", "Female"], 9)

        self.book_button = ttk.Button(self.main_frame, text="Book Tickets", command=self.book_tickets, style='TButton')
        self.book_button.grid(row=10, columnspan=2, padx=10, pady=10)

        self.result_label = ttk.Label(self.main_frame, text="")
        self.result_label.grid(row=11, columnspan=2, padx=10, pady=5)

        self.flight_status_button = ttk.Button(self.main_frame, text="Check Flight Status", command=self.check_flight_status)

    def create_label(self, text, row, **kwargs):
        label = ttk.Label(self.main_frame, text=text, **kwargs)
        label.grid(row=row, column=0, padx=10, pady=5, sticky="w")
        return label

    def create_combobox(self, values, row):
        var = tk.StringVar()
        combobox = ttk.Combobox(self.main_frame, textvariable=var, values=values)
        combobox.grid(row=row, column=1, padx=10, pady=5)
        return var, combobox

    def create_entry(self, var, row, readonly=False):
        entry_state = 'readonly' if readonly else 'normal'
        entry = ttk.Entry(self.main_frame, textvariable=var, state=entry_state)
        entry.grid(row=row, column=1, padx=10, pady=5)
        return entry

    def validate_passenger_info(self, name, age):
        if not name:
            messagebox.showerror("Error", "Please enter passenger's name.")
            return False
        elif not age:
            messagebox.showerror("Error", "Please enter passenger's age.")
            return False
        elif not age.isdigit() or int(age) <= 17 or int(age) >= 120:
            messagebox.showerror("Error", "Please enter a valid age.")
            return False
        return True

    def calculate_arrival_time(self, departure_time):
        departure_hour, departure_minute = map(int, departure_time.split(":"))
        arrival_time = datetime.strptime(departure_time, "%H:%M") + timedelta(hours=4)
        return arrival_time.strftime("%H:%M")

    def get_ticket_price(self, origin, destination, ticket_class):
        ticket_prices = {
            ("Gonder", "Axum", "Economy"): 19783,
            ("Gonder", "Axum", "Business"): 1000,
            ("Gonder", "Lalibela", "Economy"): 3405,
            ("Gonder", "Lalibela", "Business"): 1200,
            ("Gonder", "Bahirdar", "Economy"): 12969,
            ("Gonder", "Bahirdar", "Business"): 1500,
            ("Axum", "Lalibela", "Economy"): 12233,
            ("Axum", "Lalibela", "Business"): 900,
            ("Axum", "Bahirdar", "Economy"): 12117,
            ("Axum", "Bahirdar", "Business"): 1300,
            ("Axum", "Gonder", "Economy"): 13040,
            ("Axum", "Gonder", "Business"): 1300,
            ("Lalibela", "Bahirdar", "Economy"): 11810,
            ("Lalibela", "Bahirdar", "Business"): 1600,
            ("Lalibela", "Axum", "Economy"): 18625,
            ("Lalibela", "Axum", "Business"): 1600,
            ("Lalibela", "Gonder", "Economy"): 3405,
            ("Lalibela", "Gonder", "Business"): 1600,
            ("Bahirdar", "Gonder", "Economy"): 12895,
            ("Bahirdar", "Gonder", "Business"): 1600,
            ("Bahirdar", "Axum", "Economy"): 10100,
            ("Bahirdar", "Axum", "Business"): 1600,
            ("Bahirdar", "Lalibela", "Economy"): 11760,
            ("Bahirdar", "Lalibela", "Business"): 1600,
        }
        return ticket_prices.get((origin, destination, ticket_class), 0)

    def update_ticket_price(self, event=None):
        origin = self.origin_var.get()
        destination = self.destination_var.get()
        ticket_class = self.ticket_class_var.get()
        ticket_price = self.get_ticket_price(origin, destination, ticket_class)
        self.price_var.set(ticket_price)

    def validate_name_input(self, name):
        return name.replace(" ", "").isalpha()

    def generate_ticket_number(self):
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        random_number = random.randint(1000, 9999)
        return f"{timestamp}-{random_number}"

    def book_tickets(self):
        origin = self.origin_var.get()
        destination = self.destination_var.get()
        departure_time = self.departure_time_var.get()
        num_tickets = self.num_tickets_var.get()
        ticket_class = self.ticket_class_var.get()
        passenger_name = self.name_var.get()
        passenger_age = self.age_var.get()
        passenger_gender = self.gender_var.get()

        if not origin:
            messagebox.showerror("Error", "Please select an origin country.")
        elif not destination:
            messagebox.showerror("Error", "Please select a destination country.")
        elif origin == destination:
            messagebox.showerror("Error", "Origin and destination cannot be the same.")
        elif not departure_time:
            messagebox.showerror("Error", "Please select a departure time.")
        elif num_tickets <= 0:
            messagebox.showerror("Error", "Number of tickets Is not Appropriate.")
        elif num_tickets >=11:
            messagebox.showerror("Error", "Number of tickets Is not Appropriate.")
        elif not ticket_class:
            messagebox.showerror("Error", "Please select a class.")
        elif not self.validate_passenger_info(passenger_name, passenger_age):
            pass
        elif not self.validate_name_input(passenger_name):
            messagebox.showerror("Error", "Please enter a name with only letters.")
        elif not passenger_gender:
            messagebox.showerror("Error", "Please select passenger's gender.")
        else:
            ticket_price = self.get_ticket_price(origin, destination, ticket_class)
            arrival_time = self.calculate_arrival_time(departure_time)
            total_price = ticket_price * num_tickets
            ticket_number = self.generate_ticket_number()
            message = (f"                      𝒃𝒐𝒐𝒌𝒊𝒏𝒈 𝒅𝒆𝒕𝒂𝒊𝒍:\n𝒐𝒓𝒊𝒈𝒊𝒏: {origin}\n𝑫𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏: {destination}\n"
                       f"𝘿𝙚𝙥𝙖𝙧𝙩𝙪𝙧𝙚 𝙏𝙞𝙢𝙚: {departure_time}\n𝘼𝙧𝙧𝙞𝙫𝙖𝙡 𝙏𝙞𝙢𝙚: {arrival_time}\n"
                       f"𝙉𝙪𝙢𝙗𝙚𝙧 𝙤𝙛 𝙏𝙞𝙘𝙠𝙚𝙩𝙨: {num_tickets}\n𝘾𝙡𝙖𝙨𝙨: {ticket_class}\n"
                       f"𝙏𝙤𝙩𝙖𝙡 𝙋𝙧𝙞𝙘𝙚: {total_price} 𝑬𝑻𝑩\n𝙏𝙞𝙘𝙠𝙚𝙩 𝙉𝙪𝙢𝙗𝙚𝙧: {ticket_number}\n\n"
                       f"            𝑷𝒂𝒔𝒔𝒆𝒏𝒈𝒆𝒓 𝑰𝒏𝒇𝒐𝒓𝒎𝒂𝒕𝒊𝒐𝒏:\n𝙉𝙖𝙢𝙚: {passenger_name}\n"
                       f"𝘼𝙜𝙚: {passenger_age}\n𝙂𝙚𝙣𝙙𝙚𝙧: {passenger_gender}")
            confirmation = messagebox.askyesno("Confirmation", f"{message}\n\nDo you want to confirm booking?")
            if confirmation:
                self.result_label.config(text=message, background='blue', foreground='white')
                self.flight_status_button.grid(row=13, columnspan=2, padx=10, pady=10)
                self.book_button.config(state=tk.DISABLED)

                # Enable Save Button after booking confirmation
                self.save_button = ttk.Button(self.main_frame, text="Save Booking", command=self.save_booking_details, style='TButton')
                self.save_button.grid(row=10, columnspan=750, padx=350, pady=10)

    def save_booking_details(self):
        origin = self.origin_var.get()
        destination = self.destination_var.get()
        departure_time = self.departure_time_var.get()
        num_tickets = self.num_tickets_var.get()
        ticket_class = self.ticket_class_var.get()
        passenger_name = self.name_var.get()
        passenger_age = self.age_var.get()
        passenger_gender = self.gender_var.get()
        ticket_price = self.price_var.get()

        file_name = f"booking_{datetime.now().strftime('%Y%m%d%H%M%S')}.txt"
        with open(file_name, 'w') as file:
            file.write(f"Booking Details\n\n")
            file.write(f"Origin: {origin}\n")
            file.write(f"Destination: {destination}\n")
            file.write(f"Departure Time: {departure_time}\n")
            file.write(f"Number of Tickets: {num_tickets}\n")
            file.write(f"Ticket Class: {ticket_class}\n")
            file.write(f"Passenger Name: {passenger_name}\n")
            file.write(f"Passenger Age: {passenger_age}\n")
            file.write(f"Passenger Gender: {passenger_gender}\n")
            file.write(f"Total Price: {ticket_price}\n")
            file.write(f"\n\nfor payment Get Your Ticket Number And go to Any Web Sites Or Any Related Company Of Ours By Person And pay.")
            file.write(f"\nDo Not forget the Recipet Or Bank Statement!!!")



        messagebox.showinfo("Success", f"Booking details saved successfully to {file_name}")

    def check_flight_status(self):
        messagebox.showinfo("Flight Status", "Your flight is successfully booked and it's on time. Have a nice flight!")

if __name__ == "__main__":
    root = tk.Tk()
    app = TicketBookingApp(root)
    root.mainloop()
